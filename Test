using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Xunit;
using Moq;

public class ServiceEndPointsTests
{
    [Fact]
    public void SetResponseHeaders_SetsCorrectHeaders()
    {
        // Arrange
        var httpContext = new DefaultHttpContext();
        string correlationId = null;

        // Act
        ServiceEndPoints.setResponseHeaders(ref httpContext, ref correlationId);

        // Assert
        Assert.NotNull(correlationId);
        Assert.True(Guid.TryParse(correlationId, out _));
        Assert.Equal(correlationId, httpContext.Response.Headers[Constants.HEADER_CORRELATION_ID]);
        Assert.Equal(Constants.HEADER_API_VERSION, httpContext.Response.Headers[Constants.HEADER_API_VERSION]);
        Assert.Equal(Constants.HEADER_CONTENT_TYPE_VALUE, httpContext.Response.Headers[Constants.HEADER_CONTENT_TYPE_OPTIONS]);
    }

    [Fact]
    public void ResponseWithError_ReturnsCorrectResult()
    {
        // Arrange
        var response = new MyResponse { Errors = new List<Error>() };
        var error = new Error { ReasonCode = "Test", ReasonText = "Test Error", ReasonMessage = "Test Message" };

        // Act
        var result = ServiceEndPoints.responseWithError(response, error);

        // Assert
        TestHelpers.AssertJsonResult<MyResponse>(result, 400, typedResponse =>
        {
            Assert.Single(typedResponse.Errors);
            Assert.Equal(error, typedResponse.Errors[0]);
        });
    }

    [Fact]
    public void GrpcServiceNotAvailable_ReturnsCorrectResult()
    {
        // Arrange
        var response = new MyResponse { Errors = new List<Error>() };

        // Act
        var result = ServiceEndPoints.grpcServiceNotAvailable(response);

        // Assert
        TestHelpers.AssertJsonResult<MyResponse>(result, 503, typedResponse =>
        {
            Assert.Single(typedResponse.Errors);
            Assert.Equal(Constants.SERVICE_NOT_ACCESSIBLE, typedResponse.Errors[0].ReasonCode);
        });
    }

    [Fact]
    public void PerformCommonAction_WithValidRequest_ReturnsNull()
    {
        // Arrange
        var httpContext = new DefaultHttpContext();
        var response = new MyResponse();
        var request = new MyRequest();
        string correlationId = null;
        string applicationId = "TestApp";

        // Mock Validations.SendRequestForValidation to return an empty list
        // You might need to use a different approach depending on how Validations is implemented
        // For this example, we assume it's a static method that can be mocked using a library like Microsoft Fakes
        
        // Act
        var result = ServiceEndPoints.performCommonAction(ref httpContext, response, ref correlationId, applicationId, ref request);

        // Assert
        Assert.Null(result);
        Assert.NotNull(correlationId);
        Assert.Equal(applicationId, request.AppName);
        Assert.Equal(correlationId, request.AppReqID);
    }

    [Fact]
    public async Task ScannerConnect_SuccessfulRequest_ReturnsOkResult()
    {
        // Arrange
        var httpContext = new DefaultHttpContext();
        var request = new MyRequest();
        string correlationId = "TestCorrelationId";
        string applicationId = "TestApp";
        var grpcClientMock = new Mock<IGrpcIVRServiceClient>();
        var subResponse = new MySubResponse();
        grpcClientMock.Setup(x => x.ScannerConnect(It.IsAny<MyRequest>()))
            .ReturnsAsync((subResponse, new Error { ErrorMessage = string.Empty }));

        // Act
        var result = await ServiceEndPoints.ScannerConnect(request, correlationId, applicationId, httpContext, grpcClientMock.Object);

        // Assert
        TestHelpers.AssertJsonResult<MyResponse>(result, 200, typedResponse =>
        {
            Assert.Equal(subResponse, typedResponse.MySubResponse);
            Assert.Empty(typedResponse.Errors);
        });
    }

    [Fact]
    public async Task ScannerConnect_GrpcServiceNotAvailable_ReturnsServiceNotAvailableResult()
    {
        // Arrange
        var httpContext = new DefaultHttpContext();
        var request = new MyRequest();
        string correlationId = "TestCorrelationId";
        string applicationId = "TestApp";
        var grpcClientMock = new Mock<IGrpcIVRServiceClient>();
        grpcClientMock.Setup(x => x.ScannerConnect(It.IsAny<MyRequest>()))
            .ReturnsAsync((null, new Error()));

        // Act
        var result = await ServiceEndPoints.ScannerConnect(request, correlationId, applicationId, httpContext, grpcClientMock.Object);

        // Assert
        TestHelpers.AssertJsonResult<MyResponse>(result, 503, typedResponse =>
        {
            Assert.Single(typedResponse.Errors);
            Assert.Equal(Constants.SERVICE_NOT_ACCESSIBLE, typedResponse.Errors[0].ReasonCode);
        });
    }

    [Fact]
    public async Task ScannerConnect_GrpcErrorResponse_ReturnsErrorResult()
    {
        // Arrange
        var httpContext = new DefaultHttpContext();
        var request = new MyRequest();
        string correlationId = "TestCorrelationId";
        string applicationId = "TestApp";
        var grpcClientMock = new Mock<IGrpcIVRServiceClient>();
        var subResponse = new MySubResponse();
        var error = new Error { ErrorMessage = "Test Error" };
        grpcClientMock.Setup(x => x.ScannerConnect(It.IsAny<MyRequest>()))
            .ReturnsAsync((subResponse, error));

        // Act
        var result = await ServiceEndPoints.ScannerConnect(request, correlationId, applicationId, httpContext, grpcClientMock.Object);

        // Assert
        TestHelpers.AssertJsonResult<MyResponse>(result, 400, typedResponse =>
        {
            Assert.Single(typedResponse.Errors);
            Assert.Equal(error, typedResponse.Errors[0]);
        });
    }
}


using System;
using System.Reflection;
using System.Text.Json;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Xunit;

public static class TestHelpers
{
    public static void AssertJsonResult<T>(IResult result, int expectedStatusCode, Action<T> additionalAssertions)
    {
        Assert.NotNull(result);
        Assert.True(result is IResult, $"Expected IResult, but got {result.GetType()}");

        // Check status code
        var statusCodeProperty = result.GetType().GetProperty("StatusCode");
        Assert.NotNull(statusCodeProperty);
        var statusCode = statusCodeProperty.GetValue(result);
        Assert.Equal(expectedStatusCode, statusCode);

        // Get the response value
        var valueProperty = result.GetType().GetProperty("Value");
        Assert.NotNull(valueProperty);
        var value = valueProperty.GetValue(result);

        T typedResponse;
        if (value is T directValue)
        {
            typedResponse = directValue;
        }
        else
        {
            var jsonString = JsonSerializer.Serialize(value);
            typedResponse = JsonSerializer.Deserialize<T>(jsonString);
        }

        Assert.NotNull(typedResponse);
        additionalAssertions(typedResponse);
    }
}
