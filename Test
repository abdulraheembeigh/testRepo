public static class ServiceEndPoints
{
    // ... other methods ...

    private static async Task<IResult> HandleEndpointRequest<TRequest, TResponse, TSubResponse>(
        TRequest req,
        string correlationId,
        string applicationId,
        HttpContext http,
        IGrpcIVRServiceClient grpcClient,
        Func<TRequest, Task<(TSubResponse?, Error?)>> grpcMethod,
        Action<TResponse, TSubResponse> setSubResponse)
        where TRequest : IEndpointRequestModel
        where TResponse : IEndpointResponseModel, new()
        where TSubResponse : class
    {
        TResponse response = new();
        response.Errors = new List<Error>();
        response.Warnings = new List<Warning>();

        var result = performCommonAction(ref http, response, ref correlationId, applicationId, ref req);
        if (result != null)
        {
            return result;
        }

        var (resp, errorRes) = await grpcMethod(req);
        if (resp == null)
        {
            return grpcServiceNotAvailable(response);
        }
        else
        {
            setSubResponse(response, resp);
            if (errorRes != null && !string.IsNullOrEmpty(errorRes.ReasonMessage))
            {
                return responseWithError(response, errorRes);
            }
        }

        return Results.Ok(response);
    }

    public static Task<IResult> ScannerConnect(
        [FromBody] MyRequest? req,
        [FromHeader(Name = Constants.HEADER_CORRELATION_ID)] string? correlationId,
        [FromHeader(Name = Constants.HEADER_APPLICATION_ID)] string? applicationId,
        HttpContext http,
        IGrpcIVRServiceClient grpcClient)
    {
        return HandleEndpointRequest<MyRequest, MyResponse, MySubResponse>(
            req, correlationId, applicationId, http, grpcClient,
            grpcClient.ScannerConnect,
            (response, subResponse) => response.MySubResponse = subResponse);
    }

    public static Task<IResult> Logon(
        [FromBody] LogonRequest? req,
        [FromHeader(Name = Constants.HEADER_CORRELATION_ID)] string? correlationId,
        [FromHeader(Name = Constants.HEADER_APPLICATION_ID)] string? applicationId,
        HttpContext http,
        IGrpcIVRServiceClient grpcClient)
    {
        return HandleEndpointRequest<LogonRequest, LogonResponse, LogonSubResponse>(
            req, correlationId, applicationId, http, grpcClient,
            grpcClient.Logon,
            (response, subResponse) => response.LogonSubResponse = subResponse);
    }

    public static Task<IResult> LogOff(
        [FromBody] LogOffRequest? req,
        [FromHeader(Name = Constants.HEADER_CORRELATION_ID)] string? correlationId,
        [FromHeader(Name = Constants.HEADER_APPLICATION_ID)] string? applicationId,
        HttpContext http,
        IGrpcIVRServiceClient grpcClient)
    {
        return HandleEndpointRequest<LogOffRequest, LogOffResponse, LogOffSubResponse>(
            req, correlationId, applicationId, http, grpcClient,
            grpcClient.LogOff,
            (response, subResponse) => response.LogOffSubResponse = subResponse);
    }

    public static Task<IResult> ScannerDisconnect(
        [FromBody] ScannerDisconnectRequest? req,
        [FromHeader(Name = Constants.HEADER_CORRELATION_ID)] string? correlationId,
        [FromHeader(Name = Constants.HEADER_APPLICATION_ID)] string? applicationId,
        HttpContext http,
        IGrpcIVRServiceClient grpcClient)
    {
        return HandleEndpointRequest<ScannerDisconnectRequest, ScannerDisconnectResponse, ScannerDisconnectSubResponse>(
            req, correlationId, applicationId, http, grpcClient,
            grpcClient.ScannerDisconnect,
            (response, subResponse) => response.ScannerDisconnectSubResponse = subResponse);
    }

    // ... rest of the class ...
}
